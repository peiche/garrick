////
/// Alignment classes.
///
/// Primarily, we use this to build out style rules for the core WordPress
/// `.align*` classes.
///
/// @group  Utilities
/// @author Paul Eiche <paul@boldoak.design>
/// @link   https://boldoak.design/work/garrick
////

@use '~codyhouse-framework/main/assets/css/base/breakpoints';

// Shared left and right alignment styles.
.alignleft,
.alignright {

	@include breakpoints.breakpoint(sm) {
		max-width: 45%;
	}
}

// Left alignment.
.alignleft {

	@include breakpoints.breakpoint(sm) {
		float: left;
		margin: 0 var(--component-padding) var(--component-padding) 0;
	}
}

// Right alignment.
.alignright {

	@include breakpoints.breakpoint(sm) {
		float: right;
		margin: 0 0 var(--component-padding) var(--component-padding);
	}
}

// Center alignment.
.aligncenter {
	display: block;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	clear: both;
}

// Align full and wide classes.
.alignfull {
	margin-left: calc( -100vw / 2 + 100% / 2);
	margin-right: calc( -100vw / 2 + 100% / 2);
	width: auto;
	max-width: 100vw;

	// prevent content from going too wide in nested blocks
	.alignfull {
		margin-left: auto;
		margin-right: auto;
	}
}

.alignwide {

	@include breakpoints.breakpoint(md) {
		max-width: calc(100% + 2 * var(--space-xl));
		margin-left: calc(-1 * var(--space-xl));
		margin-right: calc(-1 * var(--space-xl));

		.alignwide {
			max-width: calc(100% + var(--space-xl));
		}
	}

	@include breakpoints.breakpoint(lg) {
		max-width: calc(100% + 2 * var(--space-xxl));
		margin-left: calc(-1 * var(--space-xxl));
		margin-right: calc(-1 * var(--space-xxl));

		.alignwide {
			max-width: calc(100% + var(--space-xxl));
		}
	}

	.alignwide {
		margin-left: auto;
		margin-right: auto;
	}
}

// Duplicate utility classes.
.has-text-align-left {
	text-align: left;
}

.has-text-align-center {
	text-align: center;
}

.has-text-align-right {
	text-align: right;
}
