////
/// Custom mixins.
///
/// @group  Tools
/// @author Paul Eiche <paul@boldoak.design>
/// @link   https://boldoak.design/themes/garrick
////

@use 'tools/functions';

// Shared scrollbar style
@mixin scrollbar($background: var(--color-bg), $foreground: var(--color-contrast-medium)) {

	// general scrollbar style
	&::-webkit-scrollbar {
		width: 5px;
		height: 5px;
	}

	// progress bar
	&::-webkit-scrollbar-track {
		background-color: $background;
	}

	// handle
	&::-webkit-scrollbar-thumb {
		background-color: functions.alpha($foreground, 0.9);
		border-radius: 0;

		&:hover {
			background-color: $foreground;
		}
	}
}

@mixin blockquote {
	margin-top: calc(var(--space-sm) * var(--text-vspace-multiplier, 1));
	padding-left: var(--space-md);
	border-left: 4px solid var(--color-contrast-low);
}

@mixin cite {
	color: var(--color-contrast-medium);
	font-size: 0.9em;
	display: block;
	margin-top: var(--space-sm);
}

@mixin preformatted {
	background-color: var(--color-contrast-high);
	color: var(--color-contrast-lower);
	padding: var(--space-xxs) var(--space-sm);
	margin-top: var(--space-md);
	margin-bottom: var(--space-md);
	overflow: auto;

	@include scrollbar(var(--color-contrast-high), var(--color-contrast-lower));
}

@mixin separator {
	width: 100px;
	height: 2px;
	background-color: var(--color-contrast-medium);
	margin: var(--space-md) auto;
	border: 0;
}

@mixin caption {
	display: block;
	text-align: center;
	font-size: var(--text-sm);
	color: var(--color-contrast-medium);
	margin-top: var(--space-xs);
}

@mixin screen-reader-text {
	clip:      rect( 1px, 1px, 1px, 1px );
	clip-path: inset( 50% );
	position:  absolute;
	width:     1px;
	height:    1px;
	margin:    -1px;
	overflow:  hidden;
	padding:   0;
	word-wrap: normal;
	border:    none;

	&:active,
	&:focus {
		clip:            auto;
		clip-path:       none;
		display:         block;
		height:          auto;
		width:           auto;
		z-index:         100000;
		text-decoration: none;
	}
}

// copied from Codyhouse

// edit font rendering -> tip: use for light text on dark backgrounds
@mixin fontSmooth {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

// crop top space on text elements - caused by line height
@mixin lhCrop($line-height, $capital-letter: 1) {
	&::before {
		content: '';
		display: block;
		height: 0;
		width: 0;
		margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);
	}
}

// CSS triangle
@mixin triangle ($direction: up, $width: 12px, $color: red) {
	width: 0;
	height: 0;
	border: $width solid transparent;

	@if ( $direction == left ) {
		border-right-color: $color;
	} @else if( $direction == right ) {
		border-left-color: $color;
	} @else if( $direction == down ) {
		border-top-color: $color;
	} @else {
		border-bottom-color: $color;
	}
}

// reset user agent style
@mixin reset {
	background-color: transparent;
	padding: 0;
	border: 0;
	border-radius: 0;
	color: inherit;
	line-height: inherit;
	appearance: none;
}

/// color functions

// define HSL color variable
@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
	#{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
	#{$color}-h: #{$hue};
	#{$color}-s: #{$saturation};
	#{$color}-l: #{$lightness};
}

/// Edit Units

@mixin spaceUnit($space-unit) { // edit the space unit on a component level
	--space-unit:  #{$space-unit};
	--space-xxxxs: calc(0.125 * #{$space-unit});
	--space-xxxs:  calc(0.25 * #{$space-unit});
	--space-xxs:   calc(0.375 * #{$space-unit});
	--space-xs:    calc(0.5 * #{$space-unit});
	--space-sm:    calc(0.75 * #{$space-unit});
	--space-md:    calc(1.25 * #{$space-unit});
	--space-lg:    calc(2 * #{$space-unit});
	--space-xl:    calc(3.25 * #{$space-unit});
	--space-xxl:   calc(5.25 * #{$space-unit});
	--space-xxxl:  calc(8.5 * #{$space-unit});
	--space-xxxxl: calc(13.75 * #{$space-unit});
	--component-padding: var(--space-md);
}

@mixin textUnit($text-unit, $text-scale-ratio: 1.2) { // edit the text unit and the type scale on a component level
	--text-xs: calc((#{$text-unit} / #{$text-scale-ratio}) / #{$text-scale-ratio});
	--text-sm: calc(var(--text-xs) * #{$text-scale-ratio});
	--text-md: calc(var(--text-sm) * #{$text-scale-ratio} * #{$text-scale-ratio});
	--text-lg: calc(var(--text-md) * #{$text-scale-ratio});
	--text-xl: calc(var(--text-lg) * #{$text-scale-ratio});
	--text-xxl: calc(var(--text-xl) * #{$text-scale-ratio});
	--text-xxxl: calc(var(--text-xxl) * #{$text-scale-ratio});
	--text-xxxxl: calc(var(--text-xxxl) * #{$text-scale-ratio});
	font-size: $text-unit;
}

// copied from codyhouse breakpoints

$breakpoints: (
	xs: 32rem, // ~512px
	sm: 48rem, // ~768px
	md: 64rem, // ~1024px
	lg: 80rem, // ~1280px
	xl: 90rem  // ~1440px
) !default;

@mixin breakpoint($breakpoint, $logic: false) {
	@if ( $logic ) {
		@media #{$logic} and (min-width: map-get($map: $breakpoints, $key: $breakpoint)) {
			@content;
		}
	} @else {
		@media (min-width: map-get($map: $breakpoints, $key: $breakpoint)) {
			@content;
		}
	}
}

// Single line, end with ellipses
@mixin truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin clearfix {

	&::after {
		display: block;
		content: '';
		clear: both;
	}
}

@mixin srHide {
	position: absolute;
	clip: rect(1px, 1px, 1px, 1px);
	clip-path: inset(50%);
}

@mixin srShow {
	position: static;
	clip: auto;
	clip-path: none;
}
